{"ast":null,"code":"var _jsxFileName = \"/Users/nadiia/Documents/GitHub/goit-react-hw-05-movies/src/components/MovieCast/Cast.jsx\",\n    _s = $RefreshSig$();\n\nimport PropTypes from 'prop-types';\nimport noPhoto from '../../images/noPhoto.png';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchCast } from '../../services/Api.jsx';\nimport { MovieText, Title, SecondaryMovieTitle } from '../../styles/style';\nimport { ImageCast, CastItem } from './CastStyled';\nimport { Loader } from '../Loader/Loader';\nimport { setSliderSettings } from '../slider/slider';\nimport Slider from 'react-slick';\nimport 'slick-carousel/slick/slick.css';\nimport 'slick-carousel/slick/slick-theme.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Cast() {\n  _s();\n\n  const [actors, setActors] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const {\n    moviesId\n  } = useParams();\n  useEffect(() => {\n    const fetch = async () => {\n      setLoading(true);\n\n      try {\n        await fetchCast(moviesId).then(data => setActors(data.cast));\n      } catch (error) {\n        setError(error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetch();\n  }, [moviesId]);\n  const showNoActors = !loading && actors.length === 0;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [loading && /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 19\n    }, this), showNoActors && /*#__PURE__*/_jsxDEV(Title, {\n      children: \"No actors for this movie\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 24\n    }, this), /*#__PURE__*/_jsxDEV(Slider, { ...setSliderSettings(actors.length),\n      width: \"100%\",\n      children: !error && actors && actors.map(_ref => {\n        let {\n          id,\n          character,\n          name,\n          profile_path\n        } = _ref;\n        return /*#__PURE__*/_jsxDEV(CastItem, {\n          children: [profile_path ? /*#__PURE__*/_jsxDEV(ImageCast, {\n            src: `https://image.tmdb.org/t/p/w300${profile_path}`,\n            alt: \"\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(ImageCast, {\n            src: noPhoto,\n            alt: \"\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 17\n          }, this), name ? /*#__PURE__*/_jsxDEV(SecondaryMovieTitle, {\n            children: name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(SecondaryMovieTitle, {\n            children: \"No actor`s name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 17\n          }, this), character ? /*#__PURE__*/_jsxDEV(MovieText, {\n            children: character\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(MovieText, {\n            children: \"No actor`s character\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 17\n          }, this)]\n        }, id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Cast, \"ENdX4Vik+JAXcEXt3P4Z7qvpS6Q=\", false, function () {\n  return [useParams];\n});\n\n_c = Cast;\nCast.propTypes = {\n  searchFilms: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    character: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    profile_path: PropTypes.string.isRequired,\n    backdrop_path: PropTypes.string.isRequired\n  }))\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"Cast\");","map":{"version":3,"sources":["/Users/nadiia/Documents/GitHub/goit-react-hw-05-movies/src/components/MovieCast/Cast.jsx"],"names":["PropTypes","noPhoto","useEffect","useState","useParams","fetchCast","MovieText","Title","SecondaryMovieTitle","ImageCast","CastItem","Loader","setSliderSettings","Slider","Cast","actors","setActors","loading","setLoading","error","setError","moviesId","fetch","then","data","cast","showNoActors","length","map","id","character","name","profile_path","propTypes","searchFilms","arrayOf","shape","number","isRequired","string","backdrop_path"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\nimport noPhoto from '../../images/noPhoto.png';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchCast } from '../../services/Api.jsx';\nimport { MovieText, Title, SecondaryMovieTitle } from '../../styles/style';\nimport { ImageCast, CastItem } from './CastStyled';\nimport { Loader } from '../Loader/Loader';\nimport { setSliderSettings } from '../slider/slider';\nimport Slider from 'react-slick';\nimport 'slick-carousel/slick/slick.css';\nimport 'slick-carousel/slick/slick-theme.css';\n\nexport default function Cast() {\n  const [actors, setActors] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const { moviesId } = useParams();\n\n  useEffect(() => {\n    const fetch = async () => {\n      setLoading(true);\n      try {\n        await fetchCast(moviesId).then(data => setActors(data.cast));\n      } catch (error) {\n        setError(error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetch();\n  }, [moviesId]);\n\n  const showNoActors = !loading && actors.length === 0;\n\n  return (\n    <>\n      {loading && <Loader />}\n      {showNoActors && <Title>No actors for this movie</Title>}\n      <Slider {...setSliderSettings(actors.length)} width=\"100%\">\n        {!error &&\n          actors &&\n          actors.map(({ id, character, name, profile_path }) => (\n            <CastItem key={id}>\n              {profile_path ? (\n                <ImageCast\n                  src={`https://image.tmdb.org/t/p/w300${profile_path}`}\n                  alt=\"\"\n                />\n              ) : (\n                <ImageCast src={noPhoto} alt=\"\" />\n              )}\n              {name ? (\n                <SecondaryMovieTitle>{name}</SecondaryMovieTitle>\n              ) : (\n                <SecondaryMovieTitle>No actor`s name</SecondaryMovieTitle>\n              )}\n              {character ? (\n                <MovieText>{character}</MovieText>\n              ) : (\n                <MovieText>No actor`s character</MovieText>\n              )}\n            </CastItem>\n          ))}\n      </Slider>\n    </>\n  );\n}\n\nCast.propTypes = {\n  searchFilms: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      character: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      profile_path: PropTypes.string.isRequired,\n      backdrop_path: PropTypes.string.isRequired,\n    })\n  ),\n};"]},"metadata":{},"sourceType":"module"}