{"ast":null,"code":"var _jsxFileName = \"/Users/nadiia/Documents/GitHub/goit-react-hw-05-movies/src/components/Reviews/Reviews.jsx\",\n    _s = $RefreshSig$();\n\nimport PropTypes from 'prop-types';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchReviews } from '../../services/Api';\nimport { Title, SecondaryMovieTitle } from '../../styles/style';\nimport { ReviewsItem, ReviewsList, ReviewText } from './ReviewsStyled';\nimport { Loader } from '../Loader/Loader';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Reviews() {\n  _s();\n\n  const [reviews, setReviews] = useState([]);\n  const {\n    moviesId\n  } = useParams();\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetch = async () => {\n      setLoading(true);\n\n      try {\n        await fetchReviews(moviesId).then(data => setReviews(data.results));\n      } catch (error) {\n        setError(error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetch();\n  }, [moviesId]);\n  const showNoReviews = !loading && reviews.length === 0;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [loading && /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 19\n    }, this), showNoReviews && /*#__PURE__*/_jsxDEV(Title, {\n      children: \"No reviews for this movie\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 25\n    }, this), /*#__PURE__*/_jsxDEV(ReviewsList, {\n      children: !error && reviews.map(review => /*#__PURE__*/_jsxDEV(ReviewsItem, {\n        children: [/*#__PURE__*/_jsxDEV(SecondaryMovieTitle, {\n          children: [review.author, \" :\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(ReviewText, {\n          children: review.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 15\n        }, this)]\n      }, review.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Reviews, \"gxI3vDgrJS9RKQE1AJGDsdHI0pQ=\", false, function () {\n  return [useParams];\n});\n\n_c = Reviews;\nReviews.propTypes = {\n  reviews: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    author: PropTypes.string.isRequired,\n    content: PropTypes.string.isRequired\n  }))\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"Reviews\");","map":{"version":3,"sources":["/Users/nadiia/Documents/GitHub/goit-react-hw-05-movies/src/components/Reviews/Reviews.jsx"],"names":["PropTypes","useEffect","useState","useParams","fetchReviews","Title","SecondaryMovieTitle","ReviewsItem","ReviewsList","ReviewText","Loader","Reviews","reviews","setReviews","moviesId","loading","setLoading","error","setError","fetch","then","data","results","showNoReviews","length","map","review","author","content","id","propTypes","arrayOf","shape","number","isRequired","string"],"mappings":";;;AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,SAASC,YAAT,QAA6B,oBAA7B;AACA,SAASC,KAAT,EAAgBC,mBAAhB,QAA2C,oBAA3C;AACA,SAASC,WAAT,EAAsBC,WAAtB,EAAmCC,UAAnC,QAAqD,iBAArD;AACA,SAASC,MAAT,QAAuB,kBAAvB;;;AAEA,eAAe,SAASC,OAAT,GAAmB;AAAA;;AAChC,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBX,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM;AAAEY,IAAAA;AAAF,MAAeX,SAAS,EAA9B;AACA,QAAM,CAACY,OAAD,EAAUC,UAAV,IAAwBd,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACe,KAAD,EAAQC,QAAR,IAAoBhB,QAAQ,CAAC,IAAD,CAAlC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMkB,KAAK,GAAG,YAAY;AACxBH,MAAAA,UAAU,CAAC,IAAD,CAAV;;AACA,UAAI;AACF,cAAMZ,YAAY,CAACU,QAAD,CAAZ,CAAuBM,IAAvB,CAA4BC,IAAI,IAAIR,UAAU,CAACQ,IAAI,CAACC,OAAN,CAA9C,CAAN;AACD,OAFD,CAEE,OAAOL,KAAP,EAAc;AACdC,QAAAA,QAAQ,CAACD,KAAD,CAAR;AACD,OAJD,SAIU;AACRD,QAAAA,UAAU,CAAC,KAAD,CAAV;AACD;AACF,KATD;;AAUAG,IAAAA,KAAK;AACN,GAZQ,EAYN,CAACL,QAAD,CAZM,CAAT;AAcA,QAAMS,aAAa,GAAG,CAACR,OAAD,IAAYH,OAAO,CAACY,MAAR,KAAmB,CAArD;AAEA,sBACE;AAAA,eACGT,OAAO,iBAAI,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YADd,EAEGQ,aAAa,iBAAI,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFpB,eAGE,QAAC,WAAD;AAAA,gBACG,CAACN,KAAD,IACCL,OAAO,CAACa,GAAR,CAAYC,MAAM,iBAChB,QAAC,WAAD;AAAA,gCACE,QAAC,mBAAD;AAAA,qBAAsBA,MAAM,CAACC,MAA7B;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,UAAD;AAAA,oBAAaD,MAAM,CAACE;AAApB;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA,SAAkBF,MAAM,CAACG,EAAzB;AAAA;AAAA;AAAA;AAAA,cADF;AAFJ;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA,kBADF;AAeD;;GArCuBlB,O;UAEDR,S;;;KAFCQ,O;AAuCxBA,OAAO,CAACmB,SAAR,GAAoB;AAClBlB,EAAAA,OAAO,EAAEZ,SAAS,CAAC+B,OAAV,CACP/B,SAAS,CAACgC,KAAV,CAAgB;AACdH,IAAAA,EAAE,EAAE7B,SAAS,CAACiC,MAAV,CAAiBC,UADP;AAEdP,IAAAA,MAAM,EAAE3B,SAAS,CAACmC,MAAV,CAAiBD,UAFX;AAGdN,IAAAA,OAAO,EAAE5B,SAAS,CAACmC,MAAV,CAAiBD;AAHZ,GAAhB,CADO;AADS,CAApB","sourcesContent":["import PropTypes from 'prop-types';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchReviews } from '../../services/Api';\nimport { Title, SecondaryMovieTitle } from '../../styles/style';\nimport { ReviewsItem, ReviewsList, ReviewText } from './ReviewsStyled';\nimport { Loader } from '../Loader/Loader';\n\nexport default function Reviews() {\n  const [reviews, setReviews] = useState([]);\n  const { moviesId } = useParams();\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetch = async () => {\n      setLoading(true);\n      try {\n        await fetchReviews(moviesId).then(data => setReviews(data.results));\n      } catch (error) {\n        setError(error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetch();\n  }, [moviesId]);\n\n  const showNoReviews = !loading && reviews.length === 0;\n\n  return (\n    <>\n      {loading && <Loader />}\n      {showNoReviews && <Title>No reviews for this movie</Title>}\n      <ReviewsList>\n        {!error &&\n          reviews.map(review => (\n            <ReviewsItem key={review.id}>\n              <SecondaryMovieTitle>{review.author} :</SecondaryMovieTitle>\n              <ReviewText>{review.content}</ReviewText>\n            </ReviewsItem>\n          ))}\n      </ReviewsList>\n    </>\n  );\n}\n\nReviews.propTypes = {\n  reviews: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      author: PropTypes.string.isRequired,\n      content: PropTypes.string.isRequired,\n    })\n  ),\n};"]},"metadata":{},"sourceType":"module"}